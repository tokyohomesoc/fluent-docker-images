<filter fluent.**>
  type record_transformer

  enable_ruby
  <record>
    timestamp   ${time.strftime('%Y-%m-%dT%H:%M:%S%z')}
    tag         ${tag}
    host        ${hostname}
  </record>
</filter>

<filter fluent.**>
  type                    suppress

  interval                300
  num                     2
  attr_keys               message
</filter>

<match fluent.**>
  type                    copy

  <store>
    type                  s3

    aws_key_id            "#{ENV['IDCF_ACCESS_KEY']}"
    aws_sec_key           "#{ENV['IDCF_SECRET_KEY']}"
    s3_bucket             "#{ENV['IDCF_BUCKET_NAME']}"
    s3_endpoint           https://ds.jp-east.idcfcloud.com
    check_apikey_on_start false
    signature_version     s3

#    flush_interval        5s
    retry_wait            5s
    format                json

    path                  logs/fluent/
    s3_object_key_format  "%{path}#{Socket.gethostname}/%{time_slice}_%{index}.%{file_extension}"
    buffer_type           file
    buffer_path           /home/fluent/buffer/fluent/fluent_log
    buffer_queue_limit    64
    buffer_chunk_limit    8m
    time_slice_format     %Y/%m/%d/fluent_log_%Y-%m-%d-%H.json
    time_slice_wait       10m
  </store>

  <store>
    type                 slack

    log_level            warn
    webhook_url          "#{ENV['SLACK_FLUENT_WEBHOOK_URL']}"
    channel              "#{ENV['SLACK_FLUENT_CHANNEL']}"
    username             fluentd
    icon_emoji           :fluentd:
    flush_interval       2s

    color                warning
    title_keys           tag,time,host
    title                "tag:%s, time:%s, host:%s"
    message_keys         message
    message              %s
  </store>

  <store>
    type                 stdout

    log_level            warn
  </store>
</match>